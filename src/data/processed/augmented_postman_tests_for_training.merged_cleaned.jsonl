{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval(postman.getGlobalVariable(\"payagent-post-request-script\"));\n\npm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        \n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and entryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"applicationIdentifier\", \"applicationLabel\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n\n    pm.expect(gatewayResponseData).to.be.an('object');\n\n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'contactlessChip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('contactless');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Swipe, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'swiped'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('swiped');\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keyed, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'keyed'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('keyed');\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Fallback, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'swiped'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('swiped');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"EmvInfo isFallback field is true\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.emvInfo.isFallback).to.be.true;\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Manual Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Manual Tip/Seed, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip Amount, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip Percentage, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Higher Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TotalAmount is the sum of AuthorizedAmount and TipAmount\", function () {\n    const responseData = pm.response.json();\n    const { subTotalAmount, tipAmount, totalAmount } = responseData.transactionResponseData;\n\n    pm.expect(totalAmount).to.equal(subTotalAmount + tipAmount);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $0.00] Validate Successful Sale On Device Response with $0.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount is $0.00\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.equal(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $0.01] Validate Successful Sale On Device Response with $0.01\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $1.00] Validate Successful Sale On Device Response with $1.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $99.99] Validate Successful Sale On Device Response with $99.99\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.00] Validate Successful Sale On Device Response with $100.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^x+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $1000000.00] Validate Successful Sale On Device Response with $1000000.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig, $1000000.00] Validate Successful Sale On Device Response with $1000000.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'contactlessChip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('contactlessChip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.123] Validate Successful Sale On Device Response with No Rounding\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(100.12);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.128] Validate Successful Sale On Device Response with Round Up\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers and round up\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(100.13);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip, No Sig, $100.128] Validate Successful Sale On Device Response with Round Up\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers and round up\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(120.49);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.equal(100.13);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.equal(20.36);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.equal(120.49);\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100] Validate Successful Sale On Device Response without Decimal\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount fields are a decimal value with 2 decimal places\", function () {\n    const responseData = pm.response.json();\n    const authorizedAmount = responseData.transactionResponseData.authorizedAmount;\n    const subTotalAmount = responseData.transactionResponseData.subTotalAmount;\n    const tipAmount = responseData.transactionResponseData.tipAmount;\n    const totalAmount = responseData.transactionResponseData.totalAmount;\n\n    pm.expect(authorizedAmount).to.be.a('number').and.to.satisfy(val => /^\\d+(\\.\\d{2})?$/.test(val), \"AuthorizedAmount should be a decimal value with 2 decimal places\");\n    pm.expect(subTotalAmount).to.be.a('number').and.to.satisfy(val => /^\\d+(\\.\\d{2})?$/.test(val), \"subTotalAmount should be a decimal value with 2 decimal places\");\n    pm.expect(tipAmount).to.be.a('number').and.to.satisfy(val => /^\\d+(\\.\\d{2})?$/.test(val), \"tipAmount should be a decimal value with 2 decimal places\");\n    pm.expect(totalAmount).to.be.a('number').and.to.satisfy(val => /^\\d+(\\.\\d{2})?$/.test(val), \"totalAmount should be a decimal value with 2 decimal places\");\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Retail] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Food&Beverage] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Lodging] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, eCommerce] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Visa] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"entryMode should not be 'unknown' and it should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"CardIssuer should not be 'unknown' and it should be 'visa'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.cardIssuer).to.equal('visa');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, masterCard] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"entryMode should not be 'unknown' and it should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"CardIssuer should not be 'unknown' and it should be 'masterCard'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.cardIssuer).to.equal('masterCard');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Discover] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"entryMode should not be 'unknown' and it should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"CardIssuer should not be 'unknown' and it should be 'discover'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.cardIssuer).to.equal('discover');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, AMEX] Validate Successful Sale On Device Response Copy\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"entryMode should not be 'unknown' and it should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"CardIssuer should not be 'unknown' and it should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.cardIssuer).to.equal('americanExpress');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, GenerateToken: true] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, GenerateToken: false] Validate Successful Sale On Device Response Copy\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.not.have.property('token')\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate CorrelationID with Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate ReceiptData with Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, PIN, MasterCard] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is returned as true in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.pinVerified).to.be.true;\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n\npm.test(\"TransactionReferenceData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('transactionReferenceData');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('GatewayResponseData');\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n\npm.test(\"TransactionReferenceData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('transactionReferenceData');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'contactlessChip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('contactlessChip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('GatewayResponseData');\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Swipe, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n\npm.test(\"TransactionReferenceData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('transactionReferenceData');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'swiped'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('swiped');\n});\n\npm.test(\"GatewayResponseData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('GatewayResponseData');\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keyed, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n\npm.test(\"TransactionReferenceData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('transactionReferenceData');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'keyed'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('keyed');\n});\n\npm.test(\"GatewayResponseData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('GatewayResponseData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Fallback, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n\npm.test(\"TransactionReferenceData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('transactionReferenceData');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'swiped'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('swiped');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"EmvInfo isFallback field is true\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.emvInfo.isFallback).to.be.true;\n});\n\npm.test(\"GatewayResponseData is not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.not.have.property('GatewayResponseData');\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Insert, Swipe, Tap Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Card Entry Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Exp Date Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual CVV Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Postal Code Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Credit/Debit Selection Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [PIN Entry Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Signature Prompt Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [DCC Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tip Prompt Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tip Input Screen] Validate Device Cancellation Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 404\", function () {\n  pm.response.to.have.status(404);\n});\n\npm.test(\"Response code is 9209 and reason is 'deviceUserPressedCancel'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9209);\n    pm.expect(responseData.reason).to.equal('deviceUserPressedCancel');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Insert, Swipe, Tap Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Amount OK Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Card Entry Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Exp Date Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual CVV Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Manual Postal Code Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Credit/Debit Selection Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [PIN Entry Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Singature Prompt Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [DCC Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tip Prompt Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tip Input Screen] Validate User Input Timeout Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9205 and reason is 'deviceOperationAborted'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9205);\n    pm.expect(responseData.reason).to.equal('deviceOperationAborted');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keep Trans In Progress] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n\npm.test(\"TipAmount field should not present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.transactionResponseData).to.not.have.property('tipAmount');\n});\n\npm.test(\"CardInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo).to.be.an('object');\n    const requiredFields = [\"cardHolderName\", \"accountNumberMasked\", \"cardIssuer\", \"cardType\", \"entryMode\", \"expirationYearMonth\", \"correlationId\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.cardInfo).to.have.property(field);\n    });\n});\n\n// Test to validate that accountNumberMasked field is masked\npm.test(\"AccountNumberMasked has middle characters masked\", function () {\n    const responseData = pm.response.json();\n    const accountNumberMasked = responseData.cardInfo.accountNumberMasked;\n    if (accountNumberMasked.length > 4) {\n        const middle = accountNumberMasked.substring(6, accountNumberMasked.length - 4);\n        pm.expect(middle).to.match(/^X+$/);\n    }\n});\n\npm.test(\"ExpirationYearMonth follows the YYYYMM format\", function () {\n    const responseData = pm.response.json();\n    const expirationYearMonth = responseData.cardInfo.expirationYearMonth;\n    pm.expect(expirationYearMonth).to.match(/^\\d{6}$/);\n});\n\npm.test(\"CardIssuer and entryMode should not be 'unknown' and etnryMode should be 'chip'\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.cardInfo.cardIssuer).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.not.equal('unknown');\n    pm.expect(responseData.cardInfo.entryMode).to.equal('chip');\n});\n\npm.test(\"EmvInfo object contains required fields\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.emvInfo).to.be.an('object');\n    const requiredFields = [\"isFallback\", \"mode\", \"applicationIdentifier\", \"applicationLabel\", \"issuerApplicationData\", \"terminalVerificationResults\", \"transactionStatusInformation\", \"authorizationResponseCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(responseData.emvInfo).to.have.property(field);\n    });\n});\n\npm.test(\"GatewayResponseData contains required fields\", function () {\n    const responseData = pm.response.json();\n    const gatewayResponseData = responseData.gatewayResponseData;\n    \n    pm.expect(gatewayResponseData).to.be.an('object');\n    \n    const requiredFields = [\"decision\", \"code\", \"message\", \"authCode\", \"referenceId\", \"referenceCode\"];\n    requiredFields.forEach(field => {\n        pm.expect(gatewayResponseData).to.have.property(field);\n    });\n});\n\npm.test(\"PinVerified is a boolean value\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.pinVerified).to.be.a('boolean');\n});\n\npm.test(\"ReceiptData is returned in the response\", function () {\n    pm.expect(pm.response.json()).to.have.property('receiptData');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - [Device Busy] Validate Device Busy Error for Auth On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 500\", function () {\n  pm.response.to.have.status(500);\n});\n\npm.test(\"Response code is 9203 and reason is 'deviceNotReady'\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9203);\n    pm.expect(responseData.reason).to.equal('deviceNotReady');\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/device/{{deviceGuid}}/standby - [Device Busy] Validate Device Busy Error for Device Standby Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\r\n\r\npm.test(\"Response status code is 500\", function () {\r\n  pm.response.to.have.status(500);\r\n});\r\n\r\npm.test(\"Response code is 9203 and reason is 'deviceNotReady'\", function () {\r\n    const responseData = pm.response.json();\r\n    pm.expect(responseData.code).to.equal(9203);\r\n    pm.expect(responseData.reason).to.equal('deviceNotReady');\r\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/card/info - Verify the card capture API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify by manually entering the card\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by passing invalid currency culture in the request\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by performing a card capture with Gift card and follow on data with Java iframe\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by swiping the card\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the expiration date in the cards using card capture API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the p2p data is returned in the card capture response\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the timeout scenario in the card capture\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the track 2 alone in the Gift cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the track1 alone in the Gift cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the track1 and track2 data in Gift cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether card capture api is working as expected when valid gift card is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the card capture get call returns exact card data\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/card/balance/device/{{deviceGuid}} - Verify the card capture API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Check the status of the device after calling card capture post API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by pressing cancel button in device when card capture post call is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the device status extended data after card capture\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the processing in device screen followed by card capture\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the amount sent in the request is displayed in the device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/ondemand/signature/device/{{deviceGuid}} - Verify the Signature capture API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Check the status of the device after calling signature capture post API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Decode the signature by using signature verification tool and check whether it shows exact same signature as given in device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether Signature screen prompts when signature capture API is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the signature data is returned when signature capture get call is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the Security code API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the device prompts for security entry screen when security code get post call is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/payattable/check/{checkId}/query - Verify the Security code API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Check the status of the device after calling security code post API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - Verify the Security code API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the security code by entering the empty string\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the Security code is returned when security code get call is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the security code is returned when secuirty code with maximum\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the security code is returned when security code contains '0'\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the security code is returned when security code with maximum length is called\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - Verfiy the custom form API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the afterUserInputAction in custom form with value \"Processing\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the afterUserInputAction in custom form with value \"idle\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the afterUserInputAction in custom form with value \"none\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the custom form API is working fine\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/ondemand/selection/device/{{deviceGuid}} - Verfiy the Selection API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the afterUserInputAction in Selection with value \"Processing\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the afterUserInputAction in Selection with value \"idle\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the afterUserInputAction in Selection with value \"none\"\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the device status after the selection API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the selection API is working fine\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/ondemand/signature/device/{{deviceGuid}} - Verify the Signature API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the signature API is working fine\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Validate the PIN verification for the PIN cards\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the PIN verification for the offline PIN cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - Verify the On Demand API without input\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify all the On Demand APIs without input\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/device/{{deviceGuid}}/standby - Verify the StandBy API after all POST calls\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the standBy API after all POST Calls\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Validate the form buttons in all device screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the form buttons in all device screens\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - Validate the cancel buttons in all On Demand API screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the cancel buttons in all On Demand API screen\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - Validate the Timeout scenarios in all On Demand API screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the Timeout scenarios in all On Demand API screen\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether sale with device transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether auth with device transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/credit/device/{{deviceGuid}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether credit with device transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/token/{{token}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether sale with token transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/token/{{token}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether auth with token transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/credit/token/{{token}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether credit with token transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/increase/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether auth increase transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/decrease/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether auth decrease transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/reversal/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether auth reversal transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/capture/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether capture transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/refund/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"verify whether refund transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/void/transaction/{{transactionId}} - Verify happy path testing for transaction APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"verify whether void transaction is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/token/create/device/{{deviceGuid}} - Verify happy path testing for Token APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"verify whether Token create with device API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/health - Verify happy path testing for Health APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether Health API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/health/detail - Verify happy path testing for Health APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether Health detail API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Verify the various Device status scenario using Device list API\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the various Device status scenario using Device list APIs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Verify happy path testing for Device APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether device list API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/{{deviceGuid}} - Verify happy path testing for Device APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether device (deviceguid) API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/device/{{deviceGuid}}/lane/state/open - Verify happy path testing for Device APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether device lane state API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/device/{{deviceGuid}}/standby - Verify happy path testing for Device APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether device standby API is successful\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/card/balance/token/{{token}} - Verify by creating Tokens with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether token is created when card is entered manually\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether token is created when card is swiped\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/card/info - Verify by creating Tokens with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether error is returned when expired card is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/token/create/device/{{deviceGuid}} - Verify by creating Tokens with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the timeout in token create token API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the user pressed cancel in create token API\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the sale with device transactions with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is succesfull when card is inserted when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is manually entered when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is swiped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is tapped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Verify the auth with device transactions with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is succesfull when card is inserted when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is manually entered when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is swiped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is tapped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/credit/device/{{deviceGuid}} - Verify the credit with device transactions with different entry modes\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verfiy whether the transaction is succesfull when card is manually entered when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is inserted when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is swiped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when card is tapped when device prompts for Insert/Swipe/tap/manual enter\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verfiy the sale with device transactions with different Industry types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is succesfull when industry type is given as ecommerce\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as foodAndBeverage\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as lodging\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as retail\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Verfiy the auth with device transactions with different Industry types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verfiy whether the transaction is succesfull when industry type is given as ecommerce\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as foodAndBeverage\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as lodging\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as retail\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/credit/device/{{deviceGuid}} - Verify the credit with device transactions with different Industry types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is succesfull when industry type is given as ecommerce\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as foodAndBeverage\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as lodging\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is succesfull when industry type is given as retail\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale - Verify the transaction with Lodging Data\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the daily room rate field in the lodging data\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the extra charge field in the lodging data\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the check in Date field in the Lodging data\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the check out Date field in the Lodging data\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/credit/device/{{deviceGuid}} - Verify the credit with device transactions with different card types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when apple pay is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when credit card is used/with pin and without pin\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when debit card is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when google pay is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Verify the auth with device transactions with different card types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when apple pay is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when credit card is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when debit card is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/card/balance/device/{{deviceGuid}} - Verify the auth with device transactions with different card types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether error response is returned when google pay is used\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the followon for sale/auth transactions\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the followon transactions in the FP Portal\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the zero dollar auth with tip amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth decrease is performed for auth with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth increase is performed for auth with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth reversal is performed for auth with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when capture is performed for auth with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when capture with tip amount is performed\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when refund is performed for sale with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when void is performed for sale with device transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/token/{{token}} - Verify the followon for sale/auth transactions\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when auth decrease is performed for auth with token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth increase is performed for auth with token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth reversal is performed for auth with token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when capture is performed for auth with token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when refund is performed for sale with Token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when void is performed for sale with Token transaction\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/increase/transaction/{{transactionId}} - Verify the followon for sale/auth transactions\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when auth decrease followed by auth increase and capture the full amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when auth decrease followed by auth increase and capture the partial amount followed by refund with remaining amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/reversal/transaction/{{transactionId}} - Verify the followon for sale/auth transactions\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when auth decrease followed by auth increase and capture the partial amount followed by auth reversal with remaining amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Verify the device connectivity with different connection types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify by connecting any Bluetooth supported device with Bluetooth type\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by connecting any Ethernet supported device with Ethernet type\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by connecting any USB supported device with USB type\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify by connecting any WiFi supported device with WiFi type\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the Co branded  logo in the payment device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the device connectivity with different connection types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verfiy whether DCC is working fine and DCC screen is prompting in the device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verfiy whether merchant and customer receipt are returned in response\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the stored credentials is working fine and CDV is returned in the response\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the device connectivity with different connection types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verfiy whether offline transactions are working fine and transaction state is returned in the response\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the surcharge feature\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/token/create/device/{{deviceGuid}} - Verify the device connectivity with different connection types\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the generate token feature in the request\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the trigger amounts\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the trigger amounts are working as expected\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Validate the Request and Response\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the gateway Response received in the logs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the gateway request sent in the logs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Validate the gateway request and response in the logs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the gateway request and response in the logs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale - Verify with different card brands\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the transaction with Amex cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with Diners Cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with Discover cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with Interac Debit Cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with JCB Cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with MASTERO Card\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with MC Card\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the transaction with Visa cards\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the transaction amount with and without decimals\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the transaction amount with and without decimals - different scenarios\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify with different transaction amount\n\nNow, write the JavaScript code:", "output": "pm.test(\"Transaction amount $ 0\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 0.01\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 1\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 100\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 1000000\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $99.99\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/api/message - HTTP cancel scenarios\n\nNow, write the JavaScript code:", "output": "pm.test(\"HTTP cancel scenarios\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Connectivity scenarios\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the Multilane connectivity with US region Device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the followon transaction with Apple Pay\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the follow on transaction with Apple pay\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the follow on transaction with Google Pay\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the follow on transaction with Google pay\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale - Verify the follow on transaction with Debit card\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the follow on transaction with Debit Card\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Validate the Auth Code during offline transaction\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the auth code during offline transaction while sending the request with auth code\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the auth code during offline transaction while sending the request without auth code\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the auth code in the response logs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the round off by providing the three decimal values in the tip amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the round off by providing the transaction amount $99.999\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify the round off by providing the transaction amount with $ 124.959\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the transaction date in all applicable APIs\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the transaction date in all applicable APIs\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify with different transaction amount with different entry mode (Manual / Insert / TAP  / Swipe)\n\nNow, write the JavaScript code:", "output": "pm.test(\"Transaction amount $ 0\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 0.01\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 1\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 100\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $ 1000000\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Transaction amount $99.99\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: GET {{payagent-url}}/v1.5/device/list - Verify the stored credential feature\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the stored credentials is working fine with Mexican Device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the User interface and sound in all the device screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the User interface and sound in all the device screen\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/ondemand/signature/device/{{deviceGuid}} - Verify the signature screen is prompting\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the signature screen is prompting in payment device\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/ondemand/tipcapture/device/{{deviceGuid}} - Validate the Tip Prompt screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the Tip Preset value as Amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the Tip Preset value as Percent\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the Tip Preset value as non\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Validate the Tip Preset value with basis Amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Validate the Tip Prompt screen\n\nNow, write the JavaScript code:", "output": "pm.test(\"Validate the Tip seed amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/auth/device/{{deviceGuid}} - Verify the offline transaction by performing force capture with tip amount\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify the offline auth transaction by performing force capture with Tip Amount\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/token/{{token}} - Verify the transaction and followon transaction with cross platform\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when token created in Agent and followon transaction in JAVA\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when token created in Java network and follow on transactions in Agents\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Verify the transaction and followon transaction with cross platform\n\nNow, write the JavaScript code:", "output": "pm.test(\"Verify whether the transaction is successful when trasaction perform in Agent and followon transaction in JAVA\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Verify whether the transaction is successful when trasaction perform in Java network and follow on transactions in Agents\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Sale without Tip Amount in request\n\nNow, write the JavaScript code:", "output": "pm.test(\"Perform a Sale without Tip Amount using all supported card Brands and all possible entry modes and expect success response\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Sale without Tip Amount in request\n\nNow, write the JavaScript code:", "output": "pm.test(\"Perform a Sale with Some Tip Amount (Lesser Than Transaction Amount) using all supported card Brands and all possible entry modes and expect success response.\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});pm.test(\"Perform a Sale with Tip Amount (Greater Than Transaction Amount) using all supported card Brands and all possible entry modes and expect Error response.\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
{"input": "Generate all Postman JavaScript tests for: VIEW {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - Sale with Higher TAX Amount in Request\n\nNow, write the JavaScript code:", "output": "pm.test(\"Perform a Sale higher TAX Amount using all supported card Brands and all possible entry modes and expect ERROR response from gateway\", function () {\n    pm.response.to.have.status(200);\n    // TODO: Add more checks based on scenario\n});"}
