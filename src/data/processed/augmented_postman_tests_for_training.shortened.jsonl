{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval(postman.getGlobalVariable(\"payagent-post-request-script\"));\n\npm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Swipe, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keyed, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Fallback, No Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Manual Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Manual Tip/Seed, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip Amount, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip Percentage, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Higher Tip, No Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $0.00] Validate Successful Sale On Device Response with $0.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount is $0.00\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.equal(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.equal(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $0.01] Validate Successful Sale On Device Response with $0.01\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $1.00] Validate Successful Sale On Device Response with $1.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $99.99] Validate Successful Sale On Device Response with $99.99\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.00] Validate Successful Sale On Device Response with $100.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $1000000.00] Validate Successful Sale On Device Response with $1000000.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig, $1000000.00] Validate Successful Sale On Device Response with $1000000.00\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.123] Validate Successful Sale On Device Response with No Rounding\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(100.12);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100.128] Validate Successful Sale On Device Response with Round Up\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers and round up\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(100.13);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, Tip, No Sig, $100.128] Validate Successful Sale On Device Response with Round Up\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers and round up\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.equal(120.49);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.equal(100.13);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.equal(20.36);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.equal(120.49);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, $100] Validate Successful Sale On Device Response without Decimal\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.tipAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Retail] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Food&Beverage] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Lodging] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, eCommerce] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Visa] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, masterCard] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Discover] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, AMEX] Validate Successful Sale On Device Response Copy\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, GenerateToken: true] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, GenerateToken: false] Validate Successful Sale On Device Response Copy\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.not.have.property('token')\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate CorrelationID with Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig] Validate ReceiptData with Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, Sig] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, PIN, MasterCard] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [EMV, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Tap, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Swipe, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keyed, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Fallback, No Tip, No Sig, Offline] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 504\", function () {\n  pm.response.to.have.status(504);\n});\n\npm.test(\"Response Code is 9302 and reason is gatewayUnavailable\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData.code).to.equal(9302);\n    pm.expect(responseData.reason).to.equal('gatewayUnavailable');\n});\n\npm.test(\"transactionState is present in the response\", function () {\n    const responseData = pm.response.json();\n    pm.expect(responseData).to.have.property('transactionState');\n});\n}"}
{"input": "Generate all Postman JavaScript tests for: POST {{payagent-url}}/v1.5/transaction/sale/device/{{deviceGuid}} - [Keep Trans In Progress] Validate Successful Sale On Device Response\n\nNow, write the JavaScript code:", "output": "eval( postman.getGlobalVariable( \"payagent-post-request-script\" ) );\n\npm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"TransactionReferenceData contains required fields TransactionId, Token and transactionFollowOnData\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionId').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('token').and.to.be.a('string');\n    pm.expect(responseData.transactionReferenceData).to.have.property('transactionFollowOnData').and.to.be.a('string');\n});\n\npm.test(\"AuthorizedAmount, subTotalAmount, tipAmount and totalAmount are non-negative integers\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.transactionResponseData.authorizedAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.subTotalAmount).to.be.a('number').and.to.be.at.least(0);\n    pm.expect(responseData.transactionResponseData.totalAmount).to.be.a('number').and.to.be.at.least(0);\n});\n}"}
